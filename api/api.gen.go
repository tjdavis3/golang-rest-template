// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
)

// ErrResponse defines model for ErrResponse.
type ErrResponse struct {

	// The HTTP response code
	HTTPStatusCode int `json:"HTTPStatusCode"`

	// The message explaining the error
	Msg string `json:"msg"`

	// The request id to track errors
	RequestID string `json:"requestID"`
}

// Error defines model for Error.
type Error ErrResponse

// GetTestParams defines parameters for GetTest.
type GetTestParams struct {

	// pass an id
	Id int `json:"id"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Test
	// (GET /test)
	GetTest(w http.ResponseWriter, r *http.Request, params GetTestParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetTest operation middleware
func (siw *ServerInterfaceWrapper) GetTest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, "JWT.Scopes", []string{"exec_test"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTestParams

	// ------------- Required query parameter "id" -------------
	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		http.Error(w, "Query argument id is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTest(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/test", wrapper.GetTest)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/2yT32vbMBDH/xVx26Opw8Ze/Da2sGWsUBrDHkIYqnx11MWSenceDcH/+zjZdbMkT5bv",
	"x0f63o8juNilGDAIQ3UEQk4xMOafJVEkPbgYBIPo0aa0986Kj6F84hjUxm6HndXTe8JHqOBd+UYtRy+X",
	"S6L7iQ7DMBTQIDvySVFQAahpip0un8Or41lwfpl5fSwUkCgmJPHjw7/X9d1arPT8JTZX0usdGo2ZCcZp",
	"XAFySAgV+CDYIsFQQMft9fwOmW2LBl/S3vrgQ2tkhwZzzWYSC/nQKojwuUeW1dfruMltfGMkGiHr/ows",
	"voRNNE/YQLXJTzzlF+f6tzMhPjyhk7HU6Hryclhrycey/fhVz+3U6Ae0hCdidiJpbJ0Pj/FSx/1yXZvP",
	"dysoYO8dTp0LNsNuV7X5OVkL6Gk/Abkqy5gwcOzJ4U2ktpySubxd1Vo68bJXxIj+i8TjfYubxc1CAzTf",
	"Jg8VfMymApKVXdZUCnIe3BbzR8ckT++qgQq+odTq1wSyHQoSQ7U5F5Yss7HB+AZUO1Tw3CMdoHgVlx1v",
	"PRHqsThZi/OxGrbF/5v2YbG4LCf3ziGzCvw0+q+t18wpx3U97W2Wkru6AXxB9zsXY6vXc991lg46fWob",
	"Ti0aZbSewzD8CwAA///dO90+IQQAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
